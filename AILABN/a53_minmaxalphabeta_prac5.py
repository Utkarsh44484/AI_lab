# -*- coding: utf-8 -*-
"""A53_MinMaxAlphaBeta_Prac5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wXqf1uYw2TzRw0Dp4BGmE_ujo3AvNGEO

# Artificial Intelligence Lab 
# Practical - 05

<hr>

### Name : Prathamesh Rajbhoj
### Roll : 53
### Batch : A-3

## Creating Class TreeNode to construct Tree
"""

class TreeNode:

   def __init__(self, data):
      self.left = None
      self.right = None
      self.data = data

"""## Function to construct Tree from level order Traversal"""

def CreateTreeFromList(arr):

  n = len(arr)
  tree = []

  if(n==0):
    return None

  root = TreeNode(arr[1])
  tree.append(root)

  for i in range (1,n):

    currIndex = i
    parIndex = (i-1)//2

    isLeft = True

    if(i%2==0):
      isLeft = False

    currNode = TreeNode(arr[currIndex])
    parNode = tree[parIndex]

    tree.append(currNode)

    if(isLeft):
      parNode.left = currNode
    else:
      parNode.right = currNode


  return tree

"""## Function to perform In-order Traversal"""

def inOrderTraversal(root, arr):

  if(root==None):
    return

  inOrderTraversal(root.left, arr)
  arr.append(root.data)
  inOrderTraversal(root.right, arr)

"""## Implementing Min Max Algorithm"""

def MinMax(root, isMaxLevel):

  if(root==None):
    return 0

  if(root.left == None and root.right == None):
    return root.data
  
  if(isMaxLevel == True):

    leftval = MinMax(root.left, False)
    rightval = MinMax(root.right, False)

    ans = max(leftval, rightval)
    root.data = ans

    # print(root.data, leftval, rightval)

    return ans

  else:

    leftval = MinMax(root.left, True)
    rightval = MinMax(root.right, True)

    ans = min(leftval, rightval)
    root.data = ans

    # print(root.data, leftval, rightval)
    
    return ans

"""## Implementing Alpha Beta Pruning Algorithm"""

def alphaBetaPruning(root, isMaxLevel, alpha, beta):

  if(root==None):
    return 0

  if(root.left == None and root.right == None):
    return root.data
  
  if(isMaxLevel == True):

    leftval = alphaBetaPruning(root.left, False, alpha, beta)

    alpha = max(alpha, leftval)

    if(beta <= alpha):
      return alpha

    rightval = alphaBetaPruning(root.right, False, alpha, beta)

    ans = max(leftval, rightval)
    root.data = ans

    alpha = max(alpha, rightval)

    if(beta <= alpha):
      return ans

    # print(root.data, leftval, rightval)

    return ans

  else:

    leftval = alphaBetaPruning(root.left, True, alpha, beta)

    beta = min(beta, leftval)

    if(beta <= alpha):
      return beta

    rightval = alphaBetaPruning(root.right, True, alpha, beta)

    ans = min(leftval, rightval)
    root.data = ans

    beta = min(beta, ans)

    if(beta <= alpha):
      return ans
      

    # print(root.data, leftval, rightval)
    
    return ans

"""## Testing Min Max Algo"""

# arr = [1,2,3,4]
# arr = [-1,4,2,6,-3,-5,0,7]
arr = [80,30,25,35,55,20,5,65,40,10,70,15,50,45,60,75]


for i in range(15):
  arr.insert(0, 0)

print(arr)

treeList = CreateTreeFromList(arr)
root = treeList[0]

traversal = []
inOrderTraversal(root, traversal)
print(traversal)

print("Tree Constructed : ", end = " ")
for i in treeList:
  print(i.data, end=", ")

answer = MinMax(root, True)

print(f'Value from Min-Max Algorithm : {answer}')

print("Tree Constructed : ", end = " ")
for i in treeList:
  print(i.data, end=", ")

"""## Testing Alpha Beta Pruning Algo"""

# arr = [1,2,3,4]
# arr = [-1,4,2,6,-3,-5,0,7]
arr = [80,30,25,35,55,20,5,65,40,10,70,15,50,45,60,75]


for i in range(15):
  arr.insert(0, 0)

print(arr)

treeList = CreateTreeFromList(arr)
root = treeList[0]

traversal = []
inOrderTraversal(root, traversal)
print(traversal)

print("Tree Constructed : ", end = " ")
for i in treeList:
  print(i.data, end=", ")

answer = alphaBetaPruning(root, True, -99999, 99999)

print(f'Value from Min-Max Algorithm : {answer}')

print("Tree Constructed : ", end = " ")
for i in treeList:
  print(i.data, end=", ")

