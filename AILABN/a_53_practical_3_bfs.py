# -*- coding: utf-8 -*-
"""A_53_Practical_3_BFS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SanLiUrZV0V5x3kSCHW3y1Z32d6mo_1c

# Practical 3 - Artificial Intelligence Lab 

## Name: Prathamesh Rajbhoj

## Roll No: A - 53

## Using Alphabetical Order
"""

graph = {
    'Bangalore' : [('Hyderabad',1), ('Kolkata',6), ('Mumbai',3)],
    'Hyderabad' : [('Kolkata',2), ('Lucknow',4), ('Mumbai',2)],
    'Kolkata' : [('Bangalore',6), ('Hyderabad',2), ('Lucknow',3)],
    'Lucknow' : [('Hyderabad',4), ('Kolkata',3), ('New Delhi',2)],
    'Mumbai' : [('Bangalore',3), ('Hyderabad',2), ('New Delhi',5)],
    'New Delhi' : [('Lucknow',2), ('Mumbai',5)]
}


for i in graph:
  graph[i].sort(key = lambda x: x[0]) 
  print(i, " : ", graph[i])

def bfs(graph):

  q = []
  vis = []
  parent = []

  q.append('New Delhi')
  vis.append('New Delhi')

  ancs = []

  while(q):
    sz = len(q)
    for loop in range(sz):
      node = q.pop(0)

      if(node=='Bangalore'):
        break

      for i in graph[node]: 
        if(i[0] not in vis):
          pair = (i[0],node)
          parent.append(pair)
          q.append(i[0])
          vis.append(i[0])


  # print(parent)
  return parent

parent = bfs(graph)

ans = ['Bangalore']
child = 'Bangalore'

while(child != 'New Delhi'):
  par = -1
  for i in parent:
    if(i[0]==child):
      par = i[1]
      ans.append(par)
      child = par

ans.reverse()
print('Path found from BFS Traversal is : ', ans)

pathSize = len(ans)
cost = 0

for i in range(1,pathSize):

  source = ans[i-1]
  destination = ans[i]

  for j in graph[source]:
    if(j[0]==destination):
      cost = cost + j[1]

print('Path found from BFS Traversal is : ', ans)
print('Total Cost is : ', cost)

"""## Using Minimum Path"""

graph = {
    'Bangalore' : [('Hyderabad',1), ('Kolkata',6), ('Mumbai',3)],
    'Hyderabad' : [('Kolkata',2), ('Lucknow',4), ('Mumbai',2)],
    'Kolkata' : [('Bangalore',6), ('Hyderabad',2), ('Lucknow',3)],
    'Lucknow' : [('Hyderabad',4), ('Kolkata',3), ('New Delhi',2)],
    'Mumbai' : [('Bangalore',3), ('Hyderabad',2), ('New Delhi',5)],
    'New Delhi' : [('Lucknow',2), ('Mumbai',5)]
}

# print(graph)


for i in graph:
  graph[i].sort(key = lambda x: x[1]) 
  print(i, " : ", graph[i])

# for i in range(26):
#   print(a[i])

def bfs(graph):

  q = []
  vis = []
  parent = []

  q.append('New Delhi')
  vis.append('New Delhi')

  ancs = []

  while(q):
    sz = len(q)
    for loop in range(sz):
      node = q.pop(0)

      if(node=='Bangalore'):
        break

      for i in graph[node]: 
        if(i[0] not in vis):
          pair = (i[0],node)
          parent.append(pair)
          q.append(i[0])
          vis.append(i[0])


  # print(parent)
  return parent

parent = bfs(graph)

ans = ['Bangalore']
child = 'Bangalore'

while(child != 'New Delhi'):
  par = -1
  for i in parent:
    if(i[0]==child):
      par = i[1]
      ans.append(par)
      child = par

ans.reverse()
print('Path found from BFS Traversal is : ', ans)

"""## Printing Final Cost & Path"""

pathSize = len(ans)
cost = 0

for i in range(1,pathSize):

  source = ans[i-1]
  destination = ans[i]

  for j in graph[source]:
    if(j[0]==destination):
      cost = cost + j[1]

print('Path found from BFS Traversal is : ', ans)
print('Total Cost is : ', cost)